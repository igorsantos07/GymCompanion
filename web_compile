#!/usr/bin/env python
import os
from sys import exit
from subprocess import call, check_call, check_output

ENV    = os.getenv('ENV', 'dev')
DEV    = "dev" in ENV
PEBBLE = "pebble" in ENV
MOBILE = "mobile" in ENV
PROD   = "prod" in ENV or MOBILE

print "\nWeb ~"+ENV+"~ compilation process"
print   "====================================="

dev_null = open('/dev/null', 'w')
def minify(file):
    if not DEV:
        print "  > Minifying "+file.rpartition('/')[2]
        check_call(node+'minify '+file+' '+file, shell=True, stdout=dev_null, stderr=dev_null)

# root     = os.path.dirname(os.path.abspath(__file__))+'/'
root     = ''
node     = root+'node_modules/.bin/'
root_js  = root+'src/js/'
build_js = root+'build/src/js/'

html       = root_js+'index.html'
libs       = [root_js+'libs/alertify.min.js', root_js+'libs/minified.js']
js         = build_js+'script.js'
less       = [root_js+'less/styles.less', None, root_js+'less/alertify.custom.less']
css        = [build_js+'styles.css', root_js+'less/alertify.core.css', build_js+'alertify.custom.css']
final_path = build_js+'complete.html' if not MOBILE else build_js+'index.html'
uncss_ignore = ','.join([
	'header.main h1.vip',
	'header.main.floating h1',
	'header.main.floating h1.vip',
	'header.main.floating h1 br',
	'header.main.floating nav',
	'header.main.floating nav select',
	'header.main.floating nav button',
	'header.main.floating nav button.newWorkout',
	'header.main.floating nav button i',
    '.buttons + .buttons',
    '.buttons .newWorkout:disabled',
    '.buttons .newWorkout:disabled .add',
    '.buttons .newWorkout:disabled .noAdd',
    '.buttons .newWorkout .add',
    '.buttons .newWorkout .noAdd',
    'footer #donation a.type-1',
    'footer #donation a.type-2',
    'footer #donation a.type-3',
    'footer #donation a.type-4',
    'footer #donation a.type-5',
    'footer #donation a.type-6',
    'footer #donation a.type-7'
])

# Compiling CoffeeScript and Less
print "==> Brewing CoffeeScripts"
check_call(node+'coffee --no-header -bc -o '+build_js+' '+root_js, shell=True)
check_call('cp '+root_js+'libs/bugsense.min.js '+build_js+'bugsense.min.js', shell=True)
minify(js)
print "==> Shortening CSS's"
for i in range(len(less)):
    if not less[i]: continue
    print "  > Compiling "+less[i]
    check_call(node+'lessc '+less[i]+' '+css[i], shell=True)
print "  > Removing unused rules"
check_call(node+'uncss -i "'+uncss_ignore+'" -s ../../'+css[0]+' '+html+' > '+css[0]+'.tmp && mv '+css[0]+'.tmp '+css[0], shell=True)
print "  > Prefixing needed rules"
#check_call(node+'autoprefixer -b "last 2 iOS versions, Android 4.1" -o '+css[0]+'.tmp '+css[0]+' && mv '+css[0]+'.tmp '+css[0], shell=True)

# Mixes stuff into the HTML file
print "==> Compiling everything into the HTML file"
final_file = open(final_path, 'w')

for line in open(html):
    if 'HERE BE CSS' in line:
        for style in css:
            minify(style)
            final_file.write(open(style).read())
    elif 'HERE BE JS' in line:
        for lib in libs:
            final_file.write(open(lib).read())
        final_file.write(open(js).read())
    elif 'APP_VERSION' in line:
        git_commit = check_output('env - git log -1 --format="%h"', shell=True).rstrip()
        final_file.write(line.replace('APP_VERSION', git_commit))
    else:
        final_file.write(line)

final_file.close()
minify(final_path)
final_file = open(final_path)

if PEBBLE:
    # Bundling that HTML into the main PebbleKit JS File
    print "==> Bundling HTML code into the PebbleKit JS file"
    pebblekit_path = build_js+'pebble-js-app.js'
    pebblekit_file = open(pebblekit_path, 'w')
    pebblekit_file.write("config_html = "+repr(final_file.read())+";\n")
    pebblekit_file.write(open(build_js+'pebble-integration.js').read())
    pebblekit_file.close()
    minify(pebblekit_path)

    final_size = os.path.getsize(pebblekit_path)
else:
    final_size = os.path.getsize(final_path)

print "~~> Final file size: %.2fKb" % (final_size / 1024.0)

print "====================================="
print "====> Compilation process done, sir!" 
exit(0)
